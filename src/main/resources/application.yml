spring:
  application:
    name: cp-chaos-collector
  security:
    username: admin
    password: cpcollector!123
  freemarker:
    template-loader-path: classpath:/templates/
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  cloud:
    vault:
      scheme: http
      uri: ${VAULT_URL}
      authentication: APPROLE
      kv:
        enabled: true
        backend: secret
      app-role:
        role-id: ${VAULT_ROLE_ID}
        secret-id: ${VAULT_SECRET_ID}
        role: ${VAULT_ROLE_NAME}
        app-role-path: approle
      config:
        lifecycle:
          enabled: true
          min-renewal: 10s
          expiry-threshold: 1m

management:
  endpoints:
    web:
      exposure:
        include: health
  security:
    enabled: false

server:
  port: ${PORT:8094}
  auth:
    valid: N

vault:
  path:
    cluster-token: "secret/cluster/{id}"

aspect:
  enabled: false # for checking Elapsed time

cpAnnotations:
  configuration: kubectl.kubernetes.io/, kubernetes.io/, k8s.io/
  last-applied: last-applied

cpMaster:
  api:
    metrics:
      node:
        list: "/apis/metrics.k8s.io/v1beta1/nodes"
        get: "/apis/metrics.k8s.io/v1beta1/nodes/{nodename}"
      pod:
        list: "/apis/metrics.k8s.io/v1beta1/namespaces/{namespace}/pods"
        get: "/apis/metrics.k8s.io/v1beta1/namespaces/{namespace}/pods/{podname}"
    list:
      pods:
        list: "/api/v1/namespaces/{namespace}/pods"
        get: "/api/v1/namespaces/{namespace}/pods/{podname}"
      nodes:
        list: "/api/v1/nodes"
    chaos:
      stressScenarios:
        get: "/apis/chaos-mesh.org/v1alpha1/namespaces/{namespace}/stresschaos/{chaosname}"


commonApi:
  url: ${CP_PORTAL_COMMON_API_URI}
  authorization:
    id: admin
    password: cpcommon!123